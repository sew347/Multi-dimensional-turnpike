%testHandler.m
%--------------------------------------------------------------------------
%Wrapper for running tests of the equivSolution function.
%--------------------------------------------------------------------------
%Inputs
%--------------------------------------------------------------------------
%S: Scale (distance set will be generated by randomly selecting N integer 
%vectors from the grid 0 <= x_i < S)
%D: Dimension
%N: Number of scatterers
%T: Number of test runs
%maxAttempts: Number of failed trials of a configuration allowed before returning failure
%--------------------------------------------------------------------------
%Outputs
%--------------------------------------------------------------------------
%failCount: number of times algorithm failed to return a set of points with
%correct difference set
%collabCountTotal: total number of collaboration steps
%test_loc: collection of all location sets used for testing
%fail_data: collection of location sets that were not correctly recovered
%loc_k: number of distinct points in each loc set
%diff_K: number of distinct differences in difference set of each loc set
%recovery_times: time for each testing iteration

function [failCount, collabCountTotal, test_loc, fail_data,loc_k,diff_K,recovery_times] = testHandler(N,D,S,T,n_rands)

collisionCount = 0;
failCount = 0;
collabCountTotal = 0;

test_loc = cell(1,T);
fail_data = {};
loc_k = zeros(1,T);
diff_K = zeros(1,T);
recovery_times = zeros(1,T);

for iter = 1:T
    %generate random set
    loc = (N/sqrt(2*log(S)))*randn(D,S);
    loc = round(loc);
    loc = unique(loc.','rows').';
    loc_k(iter) = size(loc,2);
    
    test_loc{iter} = loc;
    [loc_diffs, hasCollision] = getDiffs(loc);
    if hasCollision
        collisionCount = collisionCount + 1;
    end
    diff_K(iter) = size(loc_diffs,2);
    
    tic
    [output, rands, found_soln,collabCount] = MISTR(loc_diffs,n_rands);
    recovery_times(iter) = toc;
    collabCountTotal = collabCountTotal+collabCount;
    
    if ~found_soln
        failCount = failCount + 1;
        fail_data{failCount} = loc;
    end
    
    if mod(iter,10) == 0
        fprintf('Iteration %d completed with %d failures.\n',iter,failCount);
    end
end
graphSolutionProjections(loc, output)
    